{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-tsx","path":"/blog/2020/december/13-setting-up-gatsby/","result":{"data":{"markdownRemark":{"html":"<h1>Experiences with setting up Gatsby</h1>\n<p>I wanted to setup a blog for myself and confronted myself with the problem of finding a platform to build my blog on.</p>\n<p>First I wanted to do it the manual way and implement everything myself, but why go through all the hassle, when there are already so much Implementations out there?\nI didn't wanted to reinvent the wheel, and also keep it lightweight and easily deployable.\nSo I stumbled across <a href=\"https://gohugo.io\">Hugo</a> which sounded interesting and still is, especially because I want to learn GoLang anyway. After a small chat with my colleague <a href=\"https://www.larskoelpin.de\">Lars</a> in which I explained my idea, Lars recommended me to use <a href=\"https://www.gatsbyjs.com\">GatsbyJS</a>.</p>\n<p>Ok - so off we go and try out GatsbyJS.</p>\n<h2>Installation</h2>\n<p>The initial installation and setup of Gatsby was pretty easy.\nThe process is described thoroughly in tutorials and documentations on their website.</p>\n<p>Therefore, anyone that wants to try out setting up a gatsby website, shouldn't encounter too big issues while following\nthe official gatsby <a href=\"https://www.gatsbyjs.com/tutorial/\">tutorials</a>. Even if you're new to setting up websites. Though basic knowledge of HTML, CSS, and JavaScript is obviously required. Knowledge in <a href=\"https://reactjs.org\">ReactJS</a> definitely helps. If you're not familiar with ReactJS, it can be a good idea to check that out first.</p>\n<p>Since I already knew TypeScript it was a no-brainer to me to transpose all the javascript files to typescript files.\nKeep in mind, that it is not supported to change the gatsby configuration files to typescript files.</p>\n<p>Although I have linked the Tutorials I want to give a quick overview of the commands I executed.</p>\n<p>To install Gatsby</p>\n<pre><code class=\"language-shellsession\">% sudo npm i -g gatsby-cli\n</code></pre>\n<p>To make some first steps with my new Project I used the hello-world starter by GatsbyJS.</p>\n<p>Create a new Project</p>\n<pre><code class=\"language-shellsession\">blog % gatsby new hello-world https://github.com/gatsbyjs/gatsby-starter-hello-world\n</code></pre>\n<p>Run the Gatsby Develop Environment</p>\n<pre><code class=\"language-shellsession\">blog % gatsby develop\n</code></pre>\n<h3>AsciiDoctor Transformer</h3>\n<p>Since I wanted to use Asciidoctor files as blog entry I also installed the gatsby-transformer-asciidoc plugin. More on that later.</p>\n<pre><code class=\"language-shellsession\">% npm install gatsby-transformer-asciidoc\n</code></pre>\n<h3>Styled Components</h3>\n<p>I wanted to work with styled components so I installed that as well</p>\n<p>Install Styled-Components</p>\n<pre><code class=\"language-shellsession\">% npm install gatsby-plugin-styled-components styled-components babel-plugin-styled-components\n% npm i --save-dev @types/styled-components (1)\n</code></pre>\n<ol>\n<li>Since I'm using typescript I also had to install the Typescript Types</li>\n</ol>\n<h2>Experiences with Gatsby itself</h2>\n<p>To be honest, after setting up all the Gatsby Magic with your chosen fancy plugins and config files - other than running gatsby develop - you won't very much notice that you're using Gatsby. At least while developing.</p>\n<h3>Gatsby Config</h3>\n<p>The setup of the Gatsby Config is also very well documented in the tutorials, that's why I am skipping a detailed guide for this blog entry.\nAdditionally, the config is also self-explanatory for the simpler fields and including plugins is pretty straight forward too.</p>\n<p>What's way more noticeable is GraphQL. If you have never worked with GraphQL you will quickly start liking it. With GraphQL you can basically query data for further usage in your React Components. It's fast, very easy to use and very mighty.</p>\n<h3>Gatsby Nodes</h3>\n<p>I'm using it to query my Asciidoctor files in my blog directory and I can also query page-attributes that I define in my Asciidoctor files.\nWhen you're using the asciidocter-transformer you will need to implement a gatsby-node.js file in which you create nodes so that the data is available via GraphQL and also create pages <em>dynamically</em> to be able to view the transformed Asciidoctor html as a page on your website.</p>\n<blockquote>\n<p>NOTE: Dynamically is a word used with causion right here. The Pages are created while building the web page and are published as static pages.</p>\n</blockquote>\n<p>That comes in pretty handy, because I can define for example the publish date and also a category in my blog post itself via page attributes. With GraphQL I can show this data in my Blog Post as well in the overview of my recent posts or archive view.</p>\n<p>The Query for that looks like that:</p>\n<pre><code class=\"language-graphql\">query PostsQuery {\n  allAsciidoc(sort: { fields: pageAttributes___publishdate, order: DESC }) {\n    # (1)\n    edges {\n      node {\n        id\n        fields {\n          slug # (2)\n        }\n        pageAttributes {\n          # (3)\n          category\n          publishdate\n          title\n        }\n      }\n    }\n  }\n}\n</code></pre>\n<ol>\n<li>I'm using a query that returns allAsciidoc nodes sorted by the publishdate with a descending order</li>\n<li>The slug field is a created node field which contains the file path of the Asciidoctor file so we can provide a link to the page</li>\n<li>The pageAttributes node contains the page-attributes that we defined in the Asciidoctor files.</li>\n</ol>\n<h2>GraphQL</h2>\n<h3>Working with gatsby-asciidoctor-transformer</h3>\n<p>Basic Usage is pretty simple. Conversion works well and fast for now.</p>\n<p>My goal was to include Server Side Syntax Highlighting by using HighlightJS. For that I wanted to use react-highlight.js\nand use the <code>&#x3C;Highlight>&#x3C;/Highlight></code> component.\nTo achieve that, you have to intercept the asciidoc transformer. The Asciidoctor-transformer-plugin offers the possibility to implement\na Custom Converter Factory. But the Usage for that Custom Converter is not very well documented and I also had difficulties to getting it to work.</p>\n<p>Therefore I can not recommend going that way right now and would recommend to choose another way. Way simpler (but also client-side) for me was to use\nPrismJS. It still works fast, and for my blogging needs the solution is probably very much likely sufficient, since my blog posts will always have just a few small code-snippets.</p>\n<h2>Conclusion</h2>\n<p>It was a straight forward experience to use GatsbyJS. If you don't have experience with ReactJS and GraphQL, you have a small learning curve at the beginning and need some time to get used to the concepts. But both are very well documented. The Documentation of Gatsby with all Tutorials is exceptionally good as well.\nThis can not be stated for all of the plugins. Though, some of my hassles are infused by Asciidoctor itself, which i can't account gatsby or the plugins for.</p>\n<p>If you want to have a more detailed insight of the described functions, you can find the repository of this blog on my GitHub Page.</p>\n<h2>Upcoming</h2>\n<p>The next blog entry will be about Syntax Highlighting with PrismJS and Babel within GatsbyJS.</p>","frontmatter":{"category":"Gatsby","publishdate":"December 13, 2020","title":"Experiences with setting up Gatsby","slug":"blog/2020/december/13-setting-up-gatsby"}}},"pageContext":{"id":"d87f6241-4ed7-5b84-a9fd-409a66e0e86c","frontmatter__slug":"blog/2020/december/13-setting-up-gatsby","__params":{"frontmatter__slug":"blog"}}},"staticQueryHashes":["1830463481","2907835096","3649515864","4093159304","63159454"]}