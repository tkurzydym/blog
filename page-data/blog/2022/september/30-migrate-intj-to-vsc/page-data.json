{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-tsx","path":"/blog/2022/september/30-migrate-intj-to-vsc/","result":{"data":{"markdownRemark":{"html":"<h1>Migrating from IntelliJ to VS Code</h1>\n<p>I am always striving to optimize my working environment and also sometimes\njust seeking some change to keep things interesting.\nThe last couple of days I tried to migrate my IDE from JetBrains IntelliJ to\nVisual Studio Code. This is my experience.</p>\n<h2>First of all - Extensions!</h2>\n<p>Brace yourself for extensions. Otherwise VS Code is actually just a text editor.\nWith using extensions we are transforming VS Code into an actual IDE.</p>\n<p>Some extensions I tried out and found useful without going into detail:</p>\n<ul>\n<li>Language Support for Java by RedHat</li>\n<li>Git Lens</li>\n<li>Maven for Java</li>\n<li>Material Theme &#x26; Github Theme &#x26; Atom Material Theme</li>\n<li>Material Icon Theme</li>\n<li>Test Runner for Java</li>\n<li>IntelliCode</li>\n<li>Docker / Dec Containers</li>\n<li>Settings Sync</li>\n<li>Bookmarks</li>\n</ul>\n<p>A few other extensions were project specific and worked semi-optimal.\nOne example is the checkstyle integration which didn't worked seamlessly with\nthe configuration we use. Checking and formatting does not go hand-in-hand\nand makes it cumbersome to use.</p>\n<h2>Moving around in the IDE / Shortcuts</h2>\n<p>Figuring out all the shortcuts on how to navigate through code was\npretty straight forward. It's just different than in IntelliJ.</p>\n<p>My most used shortcuts as example:</p>\n<pre><code>Quick fix: option + enter -> cmd + .\nSearch for file/type: double shift -> cmd + p\nProject browser: Enter to open file -> Space to open file\nFormat document: option + command + l -> cmd + shift + p > Format Document\nOrganize Imports: cmd + shift + o -> shift + option + o\n</code></pre>\n<p>I learned that VS Codes action terminal accessed with <code>cmd + shift + p</code> is very\npowerful, I really like to use it. In IntelliJ you can access it via <code>cmd + shift + a</code>.</p>\n<p>When it comes to peeking into java methods, quicly viewing documentation,\ncall hierarchy and moving through implementation classes I found that IntelliJ\nhas the upper hand. Maybe I'm just still missing the correct extensions for VS Code,\nbut it feels much better integrated and flawless in IntelliJ on how you can peek\nand navigate between objects.</p>\n<h3>VS Code File Preview</h3>\n<p>At least thats something what confused me for a second.\nBut don't be confused. In VS Code, while single clicking files, it will show\nyou a preview of the file. Double click the file to actually open it or start\ntyping in it. When you continue clicking on other files you can cycle through\nfiles without opening them all, resulting in only one additional tab.\nActually pretty cool if you ask me.</p>\n<h3>Bonus shortcut I used a lot in VS Code</h3>\n<pre><code>(hold)cmd + k t\n</code></pre>\n<p>You have to know, I really like my themes and sometimes changing the way stuff looks\nis a major productivity booster. But I also just like to adapt my theme to the\nlight available in the room. Darker room, darker theme. Lighter room, lighter theme.</p>\n<h2>Multiple Projects</h2>\n<p>Working with microservices and different projects requires me to open a few\nrepositories at the same time. Also, when working with operational tasks,\nthere are a few different infrastructure repositories that have to be touched.</p>\n<p>I am already really happy that IntelliJ has the possibility to open projects\nas tabs when working with MacOS.\nWith VS Code you are able create a Workspace and open multiple projects in the\nsame window. That is even more amazing, since it makes navigating even faster\nand also allows you to open files from different projects directly side-by-side.</p>\n<h1>Conclusion</h1>\n<p>Sadly, while working in an Enterprise Java environment you often don't have the choice\nof tools and frameworks you can use for linting, formatting and so on.\nTherefore, IntelliJ is better suited for those Enterprise Java applications\nand for specific project needs. Simply because it has more integrated support,\nis easier to use out of the box and is tailored for the JVM. Obviously,\nthis depends on the team setup and tooling, if the project or company used tools\nare supported by existing VS Code extensions - perfect.</p>\n<p>Or even better, if you have the freedom to choose what you're using or if you are\nnot stuck in a JVM Environment, VS Code gives you the flexibility you\nneed and you can use the tools that have great VS Code extensions available.\nBe wary that setting it up takes probably a bit longer, but it can really be worth\nit, since everything can behave just like you want it to.</p>\n<p>So, as always, both of the Tools have it's ups and downs.\nI'll probably try to use VS Code for non-jvm projects and also all my operational\ntasks, which are very YAML intensive anyway, to gain more experience with VS Code.\nFor my JVM projects I will stick to IntelliJ which has all the nice integrated\nfeatures for the JVM I am so used to and love.</p>","frontmatter":{"category":"Tools","publishdate":"September 30, 2022","title":"Migrating from JetBrains IntelliJ to VS Code","slug":"blog/2022/september/30-migrate-intj-to-vsc"}}},"pageContext":{"id":"1ebf66c6-bb66-51c4-b0bb-2a3d153aaec4","frontmatter__slug":"blog/2022/september/30-migrate-intj-to-vsc","__params":{"frontmatter__slug":"blog"}}},"staticQueryHashes":["1830463481","2907835096","3649515864","4093159304","63159454"]}